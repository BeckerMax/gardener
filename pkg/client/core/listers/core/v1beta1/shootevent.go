/*
Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/gardener/gardener/pkg/apis/core/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ShootEventLister helps list ShootEvents.
type ShootEventLister interface {
	// List lists all ShootEvents in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.ShootEvent, err error)
	// ShootEvents returns an object that can list and get ShootEvents.
	ShootEvents(namespace string) ShootEventNamespaceLister
	ShootEventListerExpansion
}

// shootEventLister implements the ShootEventLister interface.
type shootEventLister struct {
	indexer cache.Indexer
}

// NewShootEventLister returns a new ShootEventLister.
func NewShootEventLister(indexer cache.Indexer) ShootEventLister {
	return &shootEventLister{indexer: indexer}
}

// List lists all ShootEvents in the indexer.
func (s *shootEventLister) List(selector labels.Selector) (ret []*v1beta1.ShootEvent, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ShootEvent))
	})
	return ret, err
}

// ShootEvents returns an object that can list and get ShootEvents.
func (s *shootEventLister) ShootEvents(namespace string) ShootEventNamespaceLister {
	return shootEventNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ShootEventNamespaceLister helps list and get ShootEvents.
type ShootEventNamespaceLister interface {
	// List lists all ShootEvents in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.ShootEvent, err error)
	// Get retrieves the ShootEvent from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.ShootEvent, error)
	ShootEventNamespaceListerExpansion
}

// shootEventNamespaceLister implements the ShootEventNamespaceLister
// interface.
type shootEventNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ShootEvents in the indexer for a given namespace.
func (s shootEventNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.ShootEvent, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ShootEvent))
	})
	return ret, err
}

// Get retrieves the ShootEvent from the indexer for a given namespace and name.
func (s shootEventNamespaceLister) Get(name string) (*v1beta1.ShootEvent, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("shootevent"), name)
	}
	return obj.(*v1beta1.ShootEvent), nil
}
